{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/crypto-browserify/index.js","webpack:///./src/api/lesson.js","webpack:///./src/api/paper.js","webpack:///./src/api/project.js","webpack:///./src/api/teacher.js","webpack:///./src/model/db.js","webpack:///./src/server.js","webpack:///external \"body-parser\"","webpack:///external \"browserify-cipher\"","webpack:///external \"browserify-sign\"","webpack:///external \"browserify-sign/algos\"","webpack:///external \"cors\"","webpack:///external \"create-ecdh\"","webpack:///external \"create-hash\"","webpack:///external \"create-hmac\"","webpack:///external \"diffie-hellman\"","webpack:///external \"express\"","webpack:///external \"multer\"","webpack:///external \"mysql2/promise\"","webpack:///external \"pbkdf2\"","webpack:///external \"public-encrypt\"","webpack:///external \"randombytes\"","webpack:///external \"randomfill\"","webpack:///external \"uuid\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFY;;AAEZ,+EAA+E,mBAAO,CAAC,gCAAa;AACpG,oCAAoC,mBAAO,CAAC,gCAAa;AACzD,oCAAoC,mBAAO,CAAC,gCAAa;;AAEzD,YAAY,mBAAO,CAAC,oDAAuB;AAC3C;AACA;AACA;AACA;AACA;;AAEA,QAAQ,mBAAO,CAAC,sBAAQ;AACxB;AACA;;AAEA,UAAU,mBAAO,CAAC,4CAAmB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,mBAAO,CAAC,sCAAgB;;AAEjC;AACA;AACA;AACA;AACA;;AAEA,WAAW,mBAAO,CAAC,wCAAiB;;AAEpC;AACA;AACA;AACA;;AAEA,qBAAqB,mBAAO,CAAC,gCAAa;;AAE1C,oBAAoB,mBAAO,CAAC,sCAAgB;;AAE5C;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,SAAS,mBAAO,CAAC,8BAAY;;AAE7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAoC;;AAEpC;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,MAAM;AACzB,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,WAAW;AAC9B,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;;;AAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;AACA,kBAAkB,iDAAS;AAC3B;;AAEA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;;AAEA,mBAAmB,MAAM;AACzB,mBAAmB,mBAAmB;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,yCAAyC,iDAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,kBAAkB,cAAc;;;AAGhC,yCAAyC,iDAAS;;AAElD;AACA,sBAAsB,iDAAS;AAC/B;AACA;;AAEA;AACA,sBAAsB,iDAAS;AAC/B;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;AAEA,kBAAkB,iDAAS;AAC3B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,4BAA4B;;AAE/C,yCAAyC,iDAAS;;AAElD;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA,eAAe,G;;AAEf;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;AAEA;AACA,sBAAsB,iDAAS;AAC/B;AACA,aAAa,G;;AAEb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,iBAAiB;;AAEpC,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,YAAY;;AAE/B,kBAAkB,iDAAS;AAC3B,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEe,yEAAU,E;;;;;;;;;;;;AC/VzB;AAAA;AAAoC;;AAEpC;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,KAAK;AACxB,yCAAyC,iDAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,UAAU;AAC7B,yCAAyC,iDAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;;AAGA,kBAAkB,iDAAS;AAC3B;;AAEA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;;;AAIL;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,uBAAuB;;AAE1C,yCAAyC,iDAAS;AAClD,iDAAiD,iDAAS;;AAE1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,sBAAsB,iDAAS;AAC/B;AACA;;AAEA;AACA,sBAAsB,iDAAS;AAC/B;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;AAEA,kBAAkB,iDAAS;AAC3B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,kDAAkD,iDAAS;;AAE3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;;AAEf,kBAAkB,iDAAS;AAC3B;AACA;AACA;;AAEA,iE;AACA,sBAAsB,iDAAS;AAC/B;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,gBAAgB;;AAEnC,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;;AAE3B,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,eAAe;;AAElC;AACA,sBAAsB,iDAAS;AAC/B,eAAe;;AAEf,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEe,wEAAS,E;;;;;;;;;;;;AC5XxB;AAAA;AAAoC;;AAEpC;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,MAAM;AACzB,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,WAAW;AAC9B,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;;;AAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;;AAGA,kBAAkB,iDAAS;AAC3B;AACA,kBAAkB,iDAAS;AAC3B;;AAEA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,yCAAyC,iDAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,aAAa;;AAEhC,yCAAyC,iDAAS;AAClD,iDAAiD,iDAAS;;AAE1D;AACA,sBAAsB,iDAAS;AAC/B;AACA;;AAEA;AACA,sBAAsB,iDAAS;AAC/B;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;AACA,kBAAkB,iDAAS;AAC3B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;;AAElD;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,eAAe;;AAEf;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;AAEA,mE;AACA,sBAAsB,iDAAS;AAC/B;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;;AAEA,mBAAmB,iBAAiB;;AAEpC,yCAAyC,iDAAS;;AAElD;AACA;AACA;;AAEA,kBAAkB,iDAAS;AAC3B,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,YAAY;AAC/B,kBAAkB,iDAAS;AAC3B,kBAAkB,iDAAS;;AAE3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEe,0EAAW,E;;;;;;;;;;;;AC/X1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACJ;AACI;;AAEQ;;AAEpC,eAAe,6CAAM;AACrB;AACA,CAAC;;AAED;;AAEA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,kD;AACA;AACA,sBAAsB;AACtB;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,iCAAiC,6CAAM;AACvC;AACA;;AAEA,kBAAkB,iDAAS;AAC3B;;AAEA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iCAAiC,6CAAM;AACvC;AACA;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,2CAAI;AACjC,0BAA0B,6CAAM;AAChC;AACA;AACA,kBAAkB,iDAAS;AAC3B,+CAA+C,iDAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,kBAAkB,iDAAS;AAC3B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,yCAAyC,iDAAS;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sBAAsB,iDAAS;AAC/B,a;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEe,0EAAW,E;;;;;;;;;;;;ACzP1B;AAAA;AAAA;AAAmC;;AAEnC,aAAa,qDAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEc,mEAAI,E;;;;;;;;;;;;ACZnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACO;AACb;;AAEY;AACI;AACA;AACF;;AAEtC,YAAY,8CAAO;AACnB,QAAQ,2CAAI;AACZ,QAAQ,kDAAU;AAClB,QAAQ,8CAAO;AACf,0DAAS;AACT,4DAAW;AACX,4DAAW;AACX,2DAAU;AACV,iB;;;;;;;;;;;ACjBA,wC;;;;;;;;;;;ACAA,8C;;;;;;;;;;;ACAA,4C;;;;;;;;;;;ACAA,kD;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,iC","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/server.js\");\n","'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n","import mysqlPool from '../model/db';\n\nconst lessonAPIs = async (app) => {\n    app.get('/api/lesson/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from TeachCourse, Lesson where TeachCourse.LID = Lesson.LID and TeachCourse.TID = ?', [tid]);\n            const data = rows.map((row) => {\n                return {\n                    lid: row.LID,\n                    lname: row.Lname,\n                    creditHours: row.credit_hours,\n                    courseNature: row.course_nature,\n                    teachYear: row.teach_year,\n                    term: row.term,\n                    undertakeCreditHours: row.undertake_credit_hours,\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/lesson/lesson/:lid', async (req, res) => {\n        try {\n            const { lid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from Lesson where LID = ?', [lid]);\n            const data = {\n                lid: rows[0].LID,\n                lname: rows[0].Lname,\n                creditHours: rows[0].credit_hours,\n                courseNature: rows[0].course_nature,\n                };\n\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/lesson/:tid/:lid', async (req, res) => {\n        try {\n            const { tid, lid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from TeachCourse, Lesson where TeachCourse.LID = Lesson.LID and TID = ? and TeachCourse.LID = ?', [tid, lid]);\n            const data = {\n                    lid: rows[0].LID,\n                    lname: rows[0].Lname,\n                    creditHours: rows[0].credit_hours,\n                    courseNature: rows[0].course_nature,\n                    teachYear: rows[0].teach_year,\n                    term: rows[0].term,\n                    undertakeCreditHours: rows[0].undertake_credit_hours,\n                };\n\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.post('/api/lesson/search', async (req, res) => {\n        try {\n            const {\n                lid, lname, creditHours, courseNature, teachYear, term, undertakeCreditHours, tid\n            } = req.body;\n            let sql = \"select * from TeachCourse, Lesson where TeachCourse.LID = Lesson.LID \"\n            let sql_array = [];\n            if(lid) {\n                sql += \"and Lesson.LID = ? \";\n                sql_array.push(lid);\n            }\n            if(lname) {\n                sql += \"and Lesson.Lname = ? \";\n                sql_array.push(lname);\n            }\n            if(creditHours) {\n                sql += \"and Lesson.credit_hours = ? \";\n                sql_array.push(creditHours);\n            }\n            if(courseNature) {\n                sql += \"and Lesson.course_nature = ? \";\n                sql_array.push(courseNature);\n            }\n            if(teachYear) {\n                sql += \"and TeachCourse.teach_year = ? \";\n                sql_array.push(teachYear);\n            }\n            if(term) {\n                sql += \"and TeachCourse.term = ? \";\n                sql_array.push(lid);\n            }\n            if(undertakeCreditHours) {\n                sql += \"and TeachCourse.undertake_credit_hours = ? \";\n                sql_array.push(undertakeCreditHours);\n            }\n            if(tid) {\n                sql += \"and TeachCourse.TID = ? \";\n                sql_array.push(tid);\n            }\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n            const data = rows.map((row) => {\n                return {\n                    tid: row.TID,\n                    lid: row.LID,\n                    lname: row.Lname,\n                    creditHours: row.credit_hours,\n                    courseNature: row.course_nature,\n                    teachYear: row.teach_year,\n                    term: row.term,\n                    undertakeCreditHours: row.undertake_credit_hours,\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    \n\n    app.post('/api/lesson', async (req, res) => {\n        try {\n            const {\n                lid,\n                lname,\n                creditHours,\n                courseNature,\n                teachYear,  \n                term,\n                undertakeCreditHours,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Lesson where LID = ?', [lid]);\n\n            if(rows.length > 0) {\n                throw new Error('数据库已存在该课程,不支持普通用户新增涉及多位教师的课程相关数据')\n            }\n\n            await mysqlPool.query('insert into Lesson(LID, Lname, credit_hours, course_nature) VALUES (?, ?, ?, ?)',\n                                [lid, lname, creditHours, courseNature]);\n            await mysqlPool.query('insert into TeachCourse(TID, LID, teach_year, term, undertake_credit_hours) VALUES (?, ?, ?, ?, ?)',\n                                [tid, lid, teachYear, term, undertakeCreditHours]);\n\n            return res.json({\n                message: \"新增课程成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/lesson/summary/:tid', async (req, res) => {\n        try {\n\n            const { tid } = req.params;\n            const {startYear, endYear} = req.body;\n\n            let sql = \"select * from TeachCourse, Lesson where TeachCourse.LID = Lesson.LID and TeachCourse.TID = ? \"\n            let sql_array = [tid];\n            \n            if(startYear && endYear) {\n                sql += `and teach_year >= ? and teach_year <= ? `;\n                sql_array.push(startYear);\n                sql_array.push(endYear);\n            } else if(startYear) {\n                sql += `and teach_year >= ? `;\n                sql_array.push(startYear);\n            } else if(endYear) {\n                sql += `and teach_year <= ? `;\n                sql_array.push(endYear);\n            }\n\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n\n            const data = rows.map((row) => {\n                return {\n                    lid: row.LID,\n                    lname: row.Lname,\n                    creditHours: row.credit_hours,\n                    courseNature: row.course_nature,\n                    teachYear: row.teach_year,\n                    term: row.term,\n                    undertakeCreditHours: row.undertake_credit_hours,\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.post('/api/lesson/admin', async (req, res) => {\n        try {\n           const { postLessons } = req.body;\n\n\n            const [rows, fields] = await mysqlPool.query('select * from Lesson where LID = ?', [postLessons[0].lid]);\n\n            if(rows.length === 0) {\n                await mysqlPool.query('insert into Lesson(LID, Lname, credit_hours, course_nature) VALUES (?, ?, ?, ?)',\n                [postLessons[0].lid, postLessons[0].lname, postLessons[0].creditHours, postLessons[0].courseNature]);\n            }\n\n            await Promise.all(postLessons.map(async element => {\n                await mysqlPool.query('insert into TeachCourse(TID, LID, teach_year, term, undertake_credit_hours) VALUES (?, ?, ?, ?, ?)',\n                                [element.tid, element.lid, element.teachYear, element.term, element.undertakeCreditHours]);\n            }));\n\n            return res.json({\n                message: \"新增课程成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.patch('/api/lesson', async (req, res) => {\n        try {\n            const {\n                modifyLid,\n                lname,\n                creditHours,\n                courseNature,\n                teachYear,  \n                term,\n                undertakeCreditHours,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from TeachCourse where LID = ?', [modifyLid]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户修改涉及多位教师的课程相关数据');\n            }\n\n            await mysqlPool.query('update Lesson set Lname = ?, credit_hours = ?, course_nature = ? where LID = ?',\n                                [lname, creditHours, courseNature, modifyLid]);\n\n            await mysqlPool.query('update TeachCourse set teach_year = ?, term = ?, undertake_credit_hours = ? where TID = ? and LID = ?',\n                                [teachYear, term, undertakeCreditHours, tid, modifyLid]);\n            return res.json({\n                    message: \"修改课程信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.patch('/api/lesson/admin', async (req, res) => {\n        try {\n            const { modifyLessons, modifyTids } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from TeachCourse where LID = ?', [modifyLessons[0].modifyLid]);\n\n            let totalUndertakeCreditHours = 0;\n\n            if(rows.length !== 0) {\n                await Promise.all(rows.map(async row => {\n                    if(! modifyTids.includes(row.TID)) {\n                        totalUndertakeCreditHours += parseInt(row.undertake_credit_hours);\n                    }\n                  }));\n            }\n\n            await Promise.all(modifyLessons.map(async element => {\n                totalUndertakeCreditHours += parseInt(element.undertakeCreditHours);\n              }));  \n\n            if(totalUndertakeCreditHours !== parseInt(modifyLessons[0].creditHours)) {\n                throw new Error(\"所有教师承担课程学时总和不等于课程总学时\");\n            }\n\n            await mysqlPool.query('update Lesson set Lname = ?, credit_hours = ?, course_nature = ? where LID = ?',\n                                [modifyLessons[0].lname, modifyLessons[0].creditHours, modifyLessons[0].courseNature, modifyLessons[0].modifyLid]);\n            \n            await Promise.all(modifyLessons.map(async element => {\n                await mysqlPool.query('update TeachCourse set teach_year = ?, term = ?, undertake_credit_hours = ? where TID = ? and LID = ?',\n                                [element.teachYear, element.term, element.undertakeCreditHours, element.modifyTid, element.modifyLid]);\n            })); \n            \n            return res.json({\n                    message: \"修改课程信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.delete('/api/lesson', async (req, res) => {\n        try {\n            const { deleteLid, tid } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from TeachCourse where LID = ?', [deleteLid]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户删除涉及多位教师的课程相关数据');\n            }\n\n            await mysqlPool.query('delete from TeachCourse where TID = ? and LID = ?',[tid, deleteLid]);\n            await mysqlPool.query('delete from Lesson where LID = ?',[deleteLid]);\n\n            return res.json({\n                message: \"删除课程成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n\n    app.delete('/api/lesson/admin', async (req, res) => {\n        try {\n            const { deleteLid } = req.body;\n\n            await mysqlPool.query('delete from TeachCourse where LID = ?',[deleteLid]);\n            await mysqlPool.query('delete from Lesson where LID = ?',[deleteLid]);\n\n            return res.json({\n                message: \"删除课程成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n}\n\nexport default lessonAPIs;","import mysqlPool from '../model/db';\n\nconst paperAPIs = async (app) => {\n    app.get('/api/paper/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from PublishPaper, Paper where PublishPaper.SN = Paper.SN and TID = ?', [tid]);\n            const data = rows.map((row) => {\n                return {\n                    sn: row.SN,\n                    title: row.title,\n                    publicSource: row.public_source,\n                    publicationYear: row.publication_year,\n                    publicType: row.public_type,\n                    publicRank: row.public_rank,\n                    paperRank: row.paper_rank,\n                    isCorrespondingAuthor: row.is_corresponding_author\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/paper/paper/:sn', async (req, res) => {\n        try {\n            const { sn } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from Paper where SN = ?', [sn]);\n            \n            const data = {\n                sn: rows[0].SN,\n                title: rows[0].title,\n                publicSource: rows[0].public_source,\n                publicationYear: rows[0].publication_year,\n                publicType: rows[0].public_type,\n                publicRank: rows[0].public_rank,\n            };\n            \n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/paper/:tid/:sn', async (req, res) => {\n        try {\n            const { tid, sn } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from PublishPaper, Paper  where PublishPaper.SN = Paper.SN and TID = ? and PublishPaper.SN = ?', [tid, sn]);\n\n            const data = {\n                    sn: rows[0].SN,\n                    title: rows[0].title,\n                    publicSource: rows[0].public_source,\n                    publicationYear: rows[0].publication_year,\n                    publicType: rows[0].public_type,\n                    publicRank: rows[0].public_rank,\n                    paperRank: rows[0].paper_rank,\n                    isCorrespondingAuthor: rows[0].is_corresponding_author\n                };\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n\n    app.post('/api/paper/search', async (req, res) => {\n        try {\n            const {\n                sn, title, publicSource, publicationYear, publicType, publicRank, paperRank, isCorrespondingAuthor, tid\n            } = req.body;\n            let sql = \"select * from PublishPaper, Paper where PublishPaper.SN = Paper.SN \"\n            let sql_array = [];\n            if(sn) {\n                sql += \"and Paper.SN = ? \";\n                sql_array.push(sn);\n            }\n            if(title) {\n                sql += \"and Paper.title = ? \";\n                sql_array.push(title);\n            }\n            if(publicSource) {\n                sql += \"and Paper.public_source = ? \";\n                sql_array.push(publicSource);\n            }\n            if(publicationYear) {\n                sql += \"and Paper.publication_year = ? \";\n                sql_array.push(publicationYear);\n            }\n            if(publicType) {\n                sql += \"and Paper.public_type = ? \";\n                sql_array.push(publicType);\n            }\n            if(publicRank) {\n                sql += \"and Paper.public_rank = ? \";\n                sql_array.push(publicRank);\n            }\n            if(paperRank) {\n                sql += \"and PublishPaper.paper_rank = ? \";\n                sql_array.push(paperRank);\n            }\n            if(isCorrespondingAuthor) {\n                sql += \"and PublishPaper.is_corresponding_author = ? \";\n                sql_array.push(isCorrespondingAuthor);\n            }\n            if(tid) {\n                sql += \"and PublishPaper.TID = ? \";\n                sql_array.push(tid);\n            }\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n            const data = rows.map((row) => {\n                return {\n                    tid: row.TID,\n                    sn: row.SN,\n                    title: row.title,\n                    publicSource: row.public_source,\n                    publicationYear: row.publication_year,\n                    publicType: row.public_type,\n                    publicRank: row.public_rank,\n                    paperRank: row.paper_rank,\n                    isCorrespondingAuthor: row.is_corresponding_author\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    \n    app.post('/api/paper', async (req, res) => {\n        try {\n            const {\n                sn,\n                title,\n                publicSource,\n                publicationYear,\n                publicType,  \n                publicRank,\n                paperRank,\n                isCorrespondingAuthor,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Paper where SN = ?', [sn]);\n\n            if(rows.length > 0) {\n                throw new Error('数据库已存在该论文,不支持普通用户新增涉及多位教师的论文相关数据')\n            }\n\n            await mysqlPool.query('insert into Paper(SN, title, public_source, publication_year, public_type, public_rank) VALUES (?, ?, ?, ?, ?, ?)',\n                                [sn, title, publicSource, publicationYear, publicType, publicRank]);\n            \n            \n            await mysqlPool.query('insert into PublishPaper(TID, SN, paper_rank, is_corresponding_author) VALUES (?, ?, ?, ?)',\n                                [tid, sn, paperRank, isCorrespondingAuthor]);\n\n            return res.json({\n                    message: \"新增论文成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    \n\n    app.post('/api/paper/summary/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            const {startYear, endYear} = req.body;\n            let sql = \"select * from PublishPaper, Paper where PublishPaper.SN = Paper.SN and PublishPaper.TID = ? \"\n            let sql_array = [tid];\n            if(startYear && endYear) {\n                sql += `and publication_year >= ? and publication_year <= ? `;\n                sql_array.push(startYear);\n                sql_array.push(endYear);\n            } else if(startYear) {\n                sql += `and publication_year >= ? `;\n                sql_array.push(startYear);\n            } else if(endYear) {\n                sql += `and publication_year <= ? `;\n                sql_array.push(endYear);\n            }\n\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n            const data = rows.map((row) => {\n                return {\n                    sn: row.SN,\n                    title: row.title,\n                    publicSource: row.public_source,\n                    publicationYear: row.publication_year,\n                    publicType: row.public_type,\n                    publicRank: row.public_rank,\n                    paperRank: row.paper_rank,\n                    isCorrespondingAuthor: row.is_corresponding_author\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.post('/api/paper/admin', async (req, res) => {\n        try {\n            const { postPapers, postTids } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Paper where SN = ?', [postPapers[0].sn]);\n            const [tmp_rows, tmp_fields] = await mysqlPool.query('select * from PublishPaper where SN = ?', postPapers[0].sn);\n\n            if(tmp_rows.length !== 0) {\n                await Promise.all(postPapers.map(async element => {\n                    if (parseInt(element.isCorrespondingAuthor) && tmp_rows.some(row => row.is_corresponding_author && ! postTids.includes(row.TID))) {\n                        throw new Error(\"该论文已存在其他通讯作者\");\n                    }\n                \n                    if (tmp_rows.some(row => row.paper_rank === parseInt(element.paperRank) && ! postTids.includes(row.TID))) {\n                        throw new Error(\"该论文已存在与你排名一样的作者\");\n                    }\n                }));\n            }\n\n            if(rows.length === 0) {\n                await mysqlPool.query('insert into Paper (SN, title, public_source, publication_year, public_type, public_rank) VALUES (?, ?, ?, ?, ?, ?)',\n                [postPapers[0].sn, postPapers[0].title, postPapers[0].publicSource, postPapers[0].publicationYear, postPapers[0].publicType, postPapers[0].publicRank]);\n            }\n\n            await Promise.all(postPapers.map(async element => {\n                await mysqlPool.query('insert into PublishPaper (TID, SN, paper_rank, is_corresponding_author) VALUES (?, ?, ?, ?)',\n                  [element.tid, element.sn, element.paperRank, element.isCorrespondingAuthor]);\n            }));\n          \n            return res.json({\n              message: \"新增论文信息成功\"\n            });\n          } catch (err) {\n            return res.status(400).json({\n              message: err.message\n            });\n          }\n    });\n\n    app.patch('/api/paper', async (req, res) => {\n        try {\n            const {\n                modifySN,\n                title,\n                publicSource,\n                publicationYear,\n                publicType,  \n                publicRank,\n                paperRank,\n                isCorrespondingAuthor,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from PublishPaper where SN = ?', [modifySN]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户修改涉及多位教师的论文相关数据');\n            }\n\n            await mysqlPool.query('update Paper set title = ?, public_source = ?, publication_year = ?, public_type = ?, public_rank = ? where SN = ?',\n                                [title, publicSource, publicationYear, publicType, publicRank, modifySN]);\n\n            await mysqlPool.query('update PublishPaper set paper_rank = ?, is_corresponding_author = ? where TID = ? and SN = ?',\n                                [paperRank, isCorrespondingAuthor, tid, modifySN]);\n            return res.json({\n                    message: \"修改论文信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.patch('/api/paper/admin', async (req, res) => {\n        try {\n            const {\n                modifyPapers,\n                modifyTids\n            } = req.body;\n\n            const [tmp_rows, tmp_fields] =  await mysqlPool.query('select * from PublishPaper where SN = ?', modifyPapers[0].modifySN);\n\n            await Promise.all(modifyPapers.map(async element => {\n                if (parseInt(element.isCorrespondingAuthor)) {\n                  if (tmp_rows.some(row => row.is_corresponding_author && !modifyTids.includes(row.TID))) {\n                    throw new Error(\"该论文已存在其他通讯作者\");\n                  }\n                }\n              \n                if (tmp_rows.some(row => row.paper_rank === parseInt(element.paperRank) && !modifyTids.includes(row.TID))) {\n                  throw new Error(\"该论文已存在与你排名一样的作者\");\n                }\n              }));\n\n            await mysqlPool.query(\n                'update Paper set title = ?, public_source = ?, publication_year = ?, public_type = ?, public_rank = ? where SN = ?',\n                [modifyPapers[0].title, modifyPapers[0].publicSource, modifyPapers[0].publicationYear, modifyPapers[0].publicType, modifyPapers[0].publicRank, modifyPapers[0].modifySN]\n            );\n              \n            await Promise.all(modifyPapers.map(async element => {              \n                await mysqlPool.query(\n                  'update PublishPaper set paper_rank = ?, is_corresponding_author = ? where TID = ? and SN = ?',\n                  [element.paperRank, element.isCorrespondingAuthor, element.modifyTid, element.modifySN]\n                );\n              }));\n\n            return res.json({\n                    message: \"修改论文信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.delete('/api/paper', async (req, res) => {\n        try {\n            const { deleteSN, tid } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from PublishPaper where SN = ?', [deleteSN]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户删除涉及多位教师的论文相关数据');\n            }\n\n            await mysqlPool.query('delete from PublishPaper where SN = ? and TID = ?',[deleteSN, tid]);\n            \n            await mysqlPool.query('delete from Paper where SN = ?',[deleteSN]);\n\n            return res.json({\n                message: \"删除论文成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n\n    app.delete('/api/paper/admin', async (req, res) => {\n        try {\n            const { deletePapers } = req.body;\n\n            await Promise.all(deletePapers.map(async element => {\n                await mysqlPool.query('delete from PublishPaper where SN = ? and TID = ?', [element.deleteSN, element.deleteTid]);\n              }));\n              \n            await mysqlPool.query('delete from Paper where SN = ?', [deletePapers[0].deleteSN]);\n\n            return res.json({\n                message: \"删除论文成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n}\n\nexport default paperAPIs;","import mysqlPool from '../model/db';\n\nconst projectAPIs = async (app) => {\n    app.get('/api/project/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from UndertakeProject where TID = ?', [tid]);\n            const data = rows.map((row) => {\n                return {\n                    pid: row.PID,\n                    pname: row.Pname,\n                    projectSource: row.project_source,\n                    projectType: row.project_type,\n                    totalBudget: row.total_budget,\n                    startYear: row.start_year,\n                    endYear: row.end_year,\n                    projectRank: row.project_rank,\n                    undertakeFunding: row.undertake_funding\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/project/project/:pid', async (req, res) => {\n        try {\n            const { pid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from Project where PID = ?', [pid]);\n            const data = {\n                    pid: rows[0].PID,\n                    pname: rows[0].Pname,\n                    projectSource: rows[0].project_source,\n                    projectType: rows[0].project_type,\n                    totalBudget: rows[0].total_budget,\n                    startYear: rows[0].start_year,\n                    endYear: rows[0].end_year,\n                };\n\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.get('/api/project/:tid/:pid', async (req, res) => {\n        try {\n            const { tid, pid } = req.params;\n            const [rows, fields] = await mysqlPool.query('select * from UndertakeProject, Project where UndertakeProject.PID = Project.PID and TID = ? and UndertakeProject.PID = ?', [tid, pid]);\n            const data = {\n                    pid: rows[0].PID,\n                    pname: rows[0].Pname,\n                    projectSource: rows[0].project_source,\n                    projectType: rows[0].project_type,\n                    totalBudget: rows[0].total_budget,\n                    startYear: rows[0].start_year,\n                    endYear: rows[0].end_year,\n                    projectRank: rows[0].project_rank,\n                    undertakeFunding: rows[0].undertake_funding\n                };\n\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.post('/api/project/search', async (req, res) => {\n        try {\n            const {\n                pid, pname, projectSource, projectType, totalBudget, startYear, endYear, projectRank, undertakeFunding, tid\n            } = req.body;\n            let sql = \"select * from UndertakeProject, Project where UndertakeProject.PID = Project.PID \"\n            let sql_array = [];\n            if(pid) {\n                sql += \"and Project.PID = ? \";\n                sql_array.push(pid);\n            }\n            if(pname) {\n                sql += \"and Project.Pname = ? \";\n                sql_array.push(pname);\n            }\n            if(projectSource) {\n                sql += \"and Project.project_source = ? \";\n                sql_array.push(projectSource);\n            }\n            if(projectType) {\n                sql += \"and Project.project_type = ? \";\n                sql_array.push(projectType);\n            }\n            if(totalBudget) {\n                sql += \"and Project.total_budget = ? \";\n                sql_array.push(totalBudget);\n            }\n            if(startYear) {\n                sql += \"and Project.start_year = ? \";\n                sql_array.push(startYear);\n            }\n            if(endYear) {\n                sql += \"and Project.end_year = ? \";\n                sql_array.push(endYear);\n            }\n            if(projectRank) {\n                sql += \"and UndertakeProject.project_rank = ? \";\n                sql_array.push(projectRank);\n            }\n            if(undertakeFunding) {\n                sql += \"and UndertakeProject.undertake_funding = ? \";\n                sql_array.push(undertakeFunding);\n            }\n            if(tid) {\n                sql += \"and UndertakeProject.TID = ? \";\n                sql_array.push(tid);\n            }\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n            const data = rows.map((row) => {\n                return {\n                    tid: row.TID,\n                    pid: row.PID,\n                    pname: row.Pname,\n                    projectSource: row.project_source,\n                    projectType: row.project_type,\n                    totalBudget: row.total_budget,\n                    startYear: row.start_year,\n                    endYear: row.end_year,\n                    projectRank: row.project_rank,\n                    undertakeFunding: row.undertake_funding\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    \n\n    app.post('/api/project', async (req, res) => {\n        try {\n            const {\n                pid,\n                pname,\n                projectSource,\n                projectType,\n                totalBudget,  \n                startYear,\n                endYear,\n                projectRank,\n                undertakeFunding,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Project where PID = ?', [pid]);\n\n            if(rows.length > 0) {\n                throw new Error('数据库已存在该项目,不支持普通用户新增涉及多位教师的项目相关数据')\n            }\n\n\n            await mysqlPool.query('insert into Project(PID, Pname, project_source, project_type, total_budget, start_year, end_year) VALUES (?, ?, ?, ?, ?, ?, ?)',\n                                [pid, pname, projectSource, projectType, totalBudget, startYear, endYear]);\n            await mysqlPool.query('insert into UndertakeProject(TID, PID, project_rank, undertake_funding) VALUES (?, ?, ?, ?)',\n                                [tid, pid, projectRank, undertakeFunding]);\n\n            return res.json({\n                message: \"新增项目成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/project/summary/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            const {startYear, endYear} = req.body;\n            let sql = \"select * from UndertakeProject, Project where UndertakeProject.PID = Project.PID and TID = ? \"\n            let sql_array = [tid];\n\n            if(startYear && endYear) {\n                sql += `and start_year >= ? and start_year <= ? `;\n                sql_array.push(startYear);\n                sql_array.push(endYear);\n            } else if(startYear) {\n                sql += `and start_year >= ? `;\n                sql_array.push(startYear);\n            } else if(endYear) {\n                sql += `and start_year <= ? `;\n                sql_array.push(endYear);\n            }\n\n            const [rows, fields] = await mysqlPool.query(sql, sql_array);\n            \n            const data = rows.map((row) => {\n                return {\n                    pid: row.PID,\n                    pname: row.Pname,\n                    projectSource: row.project_source,\n                    projectType: row.project_type,\n                    totalBudget: row.total_budget,\n                    startYear: row.start_year,\n                    endYear: row.end_year,\n                    projectRank: row.project_rank,\n                    undertakeFunding: row.undertake_funding\n                }\n            })\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.post('/api/project/admin', async (req, res) => {\n        try {\n            const {postProjects} = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Project where PID = ?', [postProjects[0].pid]);\n            const [tmp_rows, tmp_fields] = await mysqlPool.query('select * from UndertakeProject where PID = ?',  [postProjects[0].pid]);\n\n            if(rows.length === 0) {\n                await mysqlPool.query('insert into Project(PID, Pname, project_source, project_type, total_budget, start_year, end_year) VALUES (?, ?, ?, ?, ?, ?, ?)',\n                                [postProjects[0].pid, postProjects[0].pname, postProjects[0].projectSource, postProjects[0].projectType, postProjects[0].totalBudget, postProjects[0].startYear, postProjects[0].endYear]);\n            }\n\n            await Promise.all(postProjects.map(async element => {\n                await mysqlPool.query('insert into UndertakeProject(TID, PID, project_rank, undertake_funding) VALUES (?, ?, ?, ?)',\n                                [element.tid, element.pid, element.projectRank, element.undertakeFunding]);\n            }));\n\n            return res.json({\n                message: \"新增项目成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.patch('/api/project', async (req, res) => {\n        try {\n            const {\n                modifyPid,\n                pname,\n                projectSource,\n                projectType,\n                totalBudget,  \n                startYear,\n                endYear,\n                projectRank,\n                undertakeFunding,\n                tid\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from UndertakeProject where PID = ?', [modifyPid]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户修改涉及多位教师的项目相关数据');\n            }\n\n            await mysqlPool.query('update Project set Pname = ?, project_source = ?, project_type = ?, total_budget= ?, start_year = ?, end_year = ? where PID = ?',\n                                [pname, projectSource, projectType, totalBudget, startYear, endYear, modifyPid]);\n            await mysqlPool.query('update UndertakeProject set project_rank = ?, undertake_funding = ?, undertake_credit_hours = ? where TID = ? and PID = ?',\n                                [projectRank, undertakeFunding, tid, modifyPid]);\n            return res.json({\n                    message: \"修改项目信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.patch('/api/project/admin', async (req, res) => {\n        try {\n            const {\n                modifyProjects,\n                modifyTids\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from UndertakeProject where PID = ?', [modifyProjects[0].modifyPid]);\n\n            let totalUndertakeFunding = 0;\n\n            if(rows.length !== 0) {\n                await Promise.all(modifyProjects.map(async element => {\n                    if (rows.some(row => row.project_rank === parseInt(element.projectRank) && !modifyTids.includes(row.TID))) {\n                      throw new Error(\"该项目已存在与你排名一样的教师\");\n                    }\n                }));\n\n                await Promise.all(rows.map(async row => {\n                    if(! modifyTids.includes(row.TID)) {\n                        totalUndertakeFunding += parseInt(row.undertake_funding);\n                    }\n                }));\n            }\n            \n            await Promise.all(modifyProjects.map(async element => {\n                totalUndertakeFunding += parseInt(element.undertakeFunding);\n              }));\n\n            if(totalUndertakeFunding !== parseInt(modifyProjects[0].totalBudget)) {\n                throw new Error(\"所有教师承担经费总和不等于项目总经费\");\n            }\n\n            await mysqlPool.query('update Project set Pname = ?, project_source = ?, project_type = ?, total_budget= ?, start_year = ?, end_year = ? where PID = ?',\n                                [modifyProjects[0].pname, modifyProjects[0].projectSource, modifyProjects[0].projectType, modifyProjects[0].totalBudget, modifyProjects[0].startYear, modifyProjects[0].endYear, modifyProjects[0].modifyPid]);\n            \n            await Promise.all(modifyProjects.map(async element => {              \n                await mysqlPool.query(\n                    'update UndertakeProject set project_rank = ?, undertake_funding = ? where TID = ? and PID = ?',\n                  [element.projectRank, element.undertakeFunding, element.modifyTid, element.modifyPid]\n                );\n              }));\n              \n            return res.json({\n                    message: \"修改项目信息成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.delete('/api/project', async (req, res) => {\n        try {\n            \n            const { deletePid, tid } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from UndertakeProject where PID = ?', [deletePid]);\n\n            if(rows.length > 1) {\n                throw new Error('不支持普通用户删除涉及多位教师的项目相关数据');\n            }\n\n            await mysqlPool.query('delete from UndertakeProject where TID = ? and PID = ?',[tid, deletePid]);\n            await mysqlPool.query('delete from Project PID = ?',[deletePid]);\n\n            return res.json({\n                message: \"删除项目成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n\n    app.delete('/api/project/admin', async (req, res) => {\n        try {\n            const { deletePid } = req.body;\n            await mysqlPool.query('delete from UndertakeProject where PID = ?',[deletePid]);\n            await mysqlPool.query('delete from Project where PID = ?',[deletePid]);\n\n            return res.json({\n                message: \"删除项目成功\"\n            })\n        } catch(err) {\n            return res.status(400).json({\n                message: err.message\n            });\n        }\n    }) \n}\n\nexport default projectAPIs;","import Crypto from 'crypto';\nimport uuid from 'uuid';\nimport multer from 'multer';\n\nimport mysqlPool from '../model/db';\n\nconst upload = multer({\n    dest: \"./static/upload\"\n})\n\nconst teacherAPIs = (app) => {\n\n    app.get('/api/teacher/:tid', async (req, res) => {\n        try {\n            const { tid } = req.params;\n            //// if(!tid) {\n            ////     return res.status(400).json({ \n            ////         message: \"没有输入教师工号\",\n            ////     });\n            //// }\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length === 0) {\n                return res.status(400).json({\n                    message: \"该教师不存在\",\n                });\n            }\n            const data = {\n                tid: rows[0].TID,\n                tname: rows[0].Tname,\n                gender: rows[0].gender,\n                job: rows[0].job,\n                avatar: rows[0].avatar\n            }\n            return res.json({ data });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/teacher', async (req, res) => {\n        try {\n            const {\n                tid,\n                tname,\n                gender,\n                job,\n                password\n            } = req.body;\n\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length !== 0) {\n                return res.status(400).json({\n                    message: \"该教师工号已存在\",\n                });\n            }\n\n            const passwordCryp = Crypto.createHash('sha1')\n                .update(password)\n                .digest('hex');\n\n            await mysqlPool.query('insert into Teacher(TID, Tname, gender, job, password) VALUES (?, ?, ?, ?, ?)',\n                [tid, tname, gender, job, passwordCryp]);\n\n            return res.json({\n                message: \"新增教师成功\"\n            })\n\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/teacher/login', async (req, res) => {\n        try {\n            const {\n                tid,\n                password\n            } = req.body;\n            const passwordCryp = Crypto.createHash('sha1')\n                .update(password)\n                .digest('hex');\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length === 0) {\n                return res.status(400).json({\n                    message: \"该教师工号不存在\",\n                });\n            }\n            if (rows[0].password !== passwordCryp) {\n                return res.status(400).json({\n                    message: \"密码错误,请重新输入\",\n                });\n            }\n            const tokenstr = uuid.v4();\n            const token = Crypto.createHash('sha1')\n                .update(tokenstr)\n                .digest('hex');\n            await mysqlPool.query('update Teacher set token = ? where TID = ?', [token, tid]);\n            const [newRows, newFields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            const data = {\n                tid: newRows[0].TID,\n                tname: newRows[0].Tname,\n                gender: newRows[0].gender,\n                token: newRows[0].token,\n                job: newRows[0].job,\n                avatar: newRows[0].avatar\n            }\n            return res.json({\n                message: \"成功登录\",\n                data: data,\n                admin: newRows[0].admin\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/teacher/auth', async (req, res) => {\n        try {\n            const {\n                tid,\n                token\n            } = req.body;\n            if (!tid) {\n                return res.status(400).json({\n                    message: \"没有输入教师工号\",\n                });\n            }\n            if (!token) {\n                return res.status(400).json({\n                    message: \"没有输入token\",\n                });\n            }\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length === 0) {\n                return res.status(400).json({\n                    message: \"该教师工号不存在\",\n                });\n            }\n            if (token !== rows[0].token) {\n                return res.status(400).json({\n                    message: \"token已过期,请重新登录\",\n                });\n            }\n            const data = {\n                tid: rows[0].TID,\n                tname: rows[0].Tname,\n                gender: rows[0].gender,\n                job: rows[0].job,\n                avatar: rows[0].avatar\n            }\n            return res.json({\n                message: \"成功验证\",\n                data: data,\n                admin: rows[0].admin\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    });\n\n    app.post('/api/teacher/logout', async (req, res) => {\n        try {\n            const {\n                tid,\n                token\n            } = req.body;\n\n            //// if (!tid) {\n            ////     return res.status(400).json({\n            ////         message: \"没有输入教师工号\",\n            ////     });\n            //// }\n            //// if (!token) {\n            ////     return res.status(400).json({\n            ////         message: \"没有输入token\",\n            ////     });\n            //// }\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length === 0) {\n                return res.status(400).json({\n                    message: \"该教师工号不存在\",\n                });\n            }\n            if (token !== rows[0].token) {\n                return res.status(400).json({\n                    message: \"token已过期,请重新登录\",\n                });\n            }\n            await mysqlPool.query('update Teacher set token = ? where TID = ?', [null, tid]);\n            return res.json({\n                message: \"退出成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n\n    app.patch('/api/teacher', upload.single('avatar'), async (req, res) => {\n        try {\n            const {\n                tid,\n                token                \n            } = req.body;\n            //// if (!tid) {\n            ////     return res.status(400).json({\n            ////         message: \"没有输入教师工号\",\n            ////     });\n            //// }\n            //// if (!token) {\n            ////     return res.status(400).json({\n            ////         message: \"没有输入token\",\n            ////     });\n            //// }\n            const [rows, fields] = await mysqlPool.query('select * from Teacher where TID = ?', [tid]);\n            if (rows.length === 0) {\n                return res.status(400).json({\n                    message: \"该教师工号不存在\",\n                });\n            }\n            if (token !== rows[0].token) {\n                return res.status(400).json({\n                    message: \"token已过期,请重新登录\",\n                });\n            }\n            if (req.file) {\n                const avatar = req.file.filename;\n                await mysqlPool.query('update Teacher set avatar = ? where TID = ?', [avatar, tid]);\n            } \n            return res.json({\n                message: \"修改用户资料成功\"\n            });\n        } catch (err) {\n            return res.status(400).json({\n                message: err.message\n            })\n        }\n    })\n};\n\nexport default teacherAPIs;","import mysql from 'mysql2/promise';\n\nconst pool = mysql.createPool({\n    host: 'localhost',\n    user: 'root',\n    password: '20160137k',\n    database: 'lab3',\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0\n});\n\nexport default pool;","import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\n\nimport paperAPIs from './api/paper';\nimport teacherAPIs from './api/teacher';\nimport projectAPIs from './api/project';\nimport lessonAPIs from './api/lesson';\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\napp.use(express.static('static'));\npaperAPIs(app);\nteacherAPIs(app);\nprojectAPIs(app);\nlessonAPIs(app);\napp.listen(3000);","module.exports = require(\"body-parser\");","module.exports = require(\"browserify-cipher\");","module.exports = require(\"browserify-sign\");","module.exports = require(\"browserify-sign/algos\");","module.exports = require(\"cors\");","module.exports = require(\"create-ecdh\");","module.exports = require(\"create-hash\");","module.exports = require(\"create-hmac\");","module.exports = require(\"diffie-hellman\");","module.exports = require(\"express\");","module.exports = require(\"multer\");","module.exports = require(\"mysql2/promise\");","module.exports = require(\"pbkdf2\");","module.exports = require(\"public-encrypt\");","module.exports = require(\"randombytes\");","module.exports = require(\"randomfill\");","module.exports = require(\"uuid\");"],"sourceRoot":""}